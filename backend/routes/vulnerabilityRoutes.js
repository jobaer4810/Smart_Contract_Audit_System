/* Created by : Ali Mohammad Jobaer
Student ID : 103835483 */

const express = require('express');
const router = express.Router();
const db = require('../models');
const Vulnerability = db.vulnerability;

// Endpoint to fetch all vulnerabilities
router.get('/', async (req, res) => {
    try {
        const vulnerabilities = await Vulnerability.findAll();
        res.status(200).json(vulnerabilities);
    } catch (error) {
        res.status(500).json({ message: 'Error retrieving vulnerabilities', error: error.message });
    }
});

// Endpoint to fetch vulnerabilities from the latest report
router.get('/latest', async (req, res) => {
    try {
        // Fetch the latest report
        const latestReport = await db.report.findOne({ order: [['createdAt', 'DESC']] });
        
        if (!latestReport) {
            res.status(404).json({ message: 'No reports found.' });
            return;
        }

        // Fetch vulnerabilities associated with the latest report
        const vulnerabilities = await db.reportVulnerabilities.findAll({
            where: { report_id: latestReport.report_id }
        });

        // Map the associations to actual vulnerabilities
        const vulnerabilityDetails = await Promise.all(vulnerabilities.map(async (v) => {
            return await Vulnerability.findByPk(v.vulnerability_id);
        }));

        res.status(200).json(vulnerabilityDetails);
    } catch (error) {
        res.status(500).json({ message: 'Error retrieving vulnerabilities from the latest report', error: error.message });
    }
});

// Create a new vulnerability
router.post('/', async (req, res) => {
    try {
        const newVulnerability = await Vulnerability.create(req.body);
        res.status(201).json(newVulnerability);
    } catch (error) {
        res.status(500).json({ message: 'Error creating vulnerability', error: error.message });
    }
});

// Get a single vulnerability by its ID
router.get('/:id', async (req, res) => {
    try {
        const vulnerability = await Vulnerability.findByPk(req.params.id);
        if (vulnerability) {
            res.status(200).json(vulnerability);
        } else {
            res.status(404).json({ message: 'Vulnerability not found', id: req.params.id });
        }
    } catch (error) {
        res.status(500).json({ message: 'Error fetching vulnerability', error: error.message });
    }
});

// Update a vulnerability by its ID
router.put('/:id', async (req, res) => {
    try {
        const updated = await Vulnerability.update(req.body, {
            where: { vulnerability_id: req.params.id }
        });
        if (updated[0] === 0) {
            res.status(404).json({ message: 'Vulnerability not found', id: req.params.id });
        } else {
            res.status(200).json({ message: 'Vulnerability updated successfully' });
        }
    } catch (error) {
        res.status(500).json({ message: 'Error updating vulnerability', error: error.message });
    }
});

// Delete a vulnerability by its ID
router.delete('/:id', async (req, res) => {
    try {
        const deleted = await Vulnerability.destroy({
            where: { vulnerability_id: req.params.id }
        });
        if (deleted) {
            res.status(200).json({ message: 'Vulnerability deleted successfully' });
        } else {
            res.status(404).json({ message: 'Vulnerability not found', id: req.params.id });
        }
    } catch (error) {
        res.status(500).json({ message: 'Error deleting vulnerability', error: error.message });
    }
});

module.exports = router;
